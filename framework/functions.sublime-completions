
{
	"scope": "source.lua",
	"completions": 
	[
		{ "trigger": "tonum(v, base)", "contents": "tonum(${1:v}, ${2:base})" },
		{ "trigger": "toint(v)", "contents": "toint(${1:v})" },
		{ "trigger": "tobool(v)", "contents": "tobool(${1:v})" },
		{ "trigger": "totable(v)", "contents": "totable(${1:v})" },
		{ "trigger": "isset(arr, key)", "contents": "isset(${1:arr}, ${2:key})" },
		{ "trigger": "clone(object)", "contents": "clone(${1:object})" },
		{ "trigger": "class(classname, super)", "contents": "class(${1:classname}, ${2:super})" },
		{ "trigger": "iskindof(obj, className)", "contents": "iskindof(${1:obj}, ${2:className})" },
		{ "trigger": "import(moduleName, currentModuleName)", "contents": "import(${1:moduleName}, ${2:currentModuleName})" },
		{ "trigger": "handler(target, method)", "contents": "handler(${1:target}, ${2:method})" },
		{ "trigger": "math.round(num)", "contents": "math.round(${1:num})" },
		{ "trigger": "io.exists(path)", "contents": "io.exists(${1:path})" },
		{ "trigger": "io.readfile(path)", "contents": "io.readfile(${1:path})" },
		{ "trigger": "io.writefile(path, content, mode)", "contents": "io.writefile(${1:path}, ${2:content}, ${3:mode})" },
		{ "trigger": "io.pathinfo(path)", "contents": "io.pathinfo(${1:path})" },
		{ "trigger": "io.filesize(path)", "contents": "io.filesize(${1:path})" },
		{ "trigger": "table.nums(t)", "contents": "table.nums(${1:t})" },
		{ "trigger": "table.keys(t)", "contents": "table.keys(${1:t})" },
		{ "trigger": "table.values(t)", "contents": "table.values(${1:t})" },
		{ "trigger": "table.merge(dest, src)", "contents": "table.merge(${1:dest}, ${2:src})" },
		{ "trigger": "table.insertTo(dest, src, begin)", "contents": "table.insertTo(${1:dest}, ${2:src}, ${3:begin})" },
		{ "trigger": "table.indexOf(list, target, from, useMaxN)", "contents": "table.indexOf(${1:list}, ${2:target}, ${3:from}, ${4:useMaxN})" },
		{ "trigger": "table.indexOfKey(list, key, value, from, useMaxN)", "contents": "table.indexOfKey(${1:list}, ${2:key}, ${3:value}, ${4:from}, ${5:useMaxN})" },
		{ "trigger": "table.removeItem(list, item, removeAll)", "contents": "table.removeItem(${1:list}, ${2:item}, ${3:removeAll})" },
		{ "trigger": "string.htmlspecialchars(input)", "contents": "string.htmlspecialchars(${1:input})" },
		{ "trigger": "string.htmlspecialcharsDecode(input)", "contents": "string.htmlspecialcharsDecode(${1:input})" },
		{ "trigger": "string.nl2br(input)", "contents": "string.nl2br(${1:input})" },
		{ "trigger": "string.text2html(input)", "contents": "string.text2html(${1:input})" },
		{ "trigger": "string.split(str, delimiter)", "contents": "string.split(${1:str}, ${2:delimiter})" },
		{ "trigger": "string.ltrim(str)", "contents": "string.ltrim(${1:str})" },
		{ "trigger": "string.rtrim(str)", "contents": "string.rtrim(${1:str})" },
		{ "trigger": "string.trim(str)", "contents": "string.trim(${1:str})" },
		{ "trigger": "string.ucfirst(str)", "contents": "string.ucfirst(${1:str})" },
		{ "trigger": "string.urlencode(str)", "contents": "string.urlencode(${1:str})" },
		{ "trigger": "string.urldecode(str)", "contents": "string.urldecode(${1:str})" },
		{ "trigger": "string.utf8len(str)", "contents": "string.utf8len(${1:str})" },
		{ "trigger": "string.formatNumberThousands(num)", "contents": "string.formatNumberThousands(${1:num})" }
	]
}
